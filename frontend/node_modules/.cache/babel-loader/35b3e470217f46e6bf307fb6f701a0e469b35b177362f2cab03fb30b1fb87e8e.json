{"ast":null,"code":"var _jsxFileName = \"/Users/JM/Desktop/Task_Fullstack_Developer_dotNET/frontend/src/Components/AddTaskModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../Style/AddTaskModal.css'; // Import the CSS for styling the modal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTaskModal = ({\n  isVisible,\n  onClose,\n  onAdd,\n  task\n}) => {\n  _s();\n  const [newTask, setNewTask] = useState({\n    name: '',\n    age: '',\n    city: '',\n    country: ''\n  });\n\n  // Function to handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewTask(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Use effect to pre-populate fields when editing\n  useEffect(() => {\n    if (task) {\n      setNewTask({\n        name: task.Description || '',\n        age: task.Status || '',\n        city: task.Date || '',\n        country: '' // You can add more fields if necessary\n      });\n    } else {\n      setNewTask({\n        name: '',\n        age: '',\n        city: '',\n        country: ''\n      }); // Reset when adding a new task\n    }\n  }, [task]);\n\n  // Function to handle adding a new task\n  const handleAddOrUpdateTask = e => {\n    e.preventDefault();\n    if (newTask.name && newTask.age && newTask.city) {\n      onAdd({\n        Description: newTask.name,\n        Status: newTask.age,\n        Date: newTask.city\n      });\n      setNewTask({\n        name: '',\n        age: '',\n        city: '',\n        country: ''\n      }); // Reset form\n    } else {\n      alert(\"Please fill out all fields.\"); // Simple validation\n    }\n  };\n  if (!isVisible) return null; // If not visible, don't render anything\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task ? 'Update Task' : 'Add New Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddOrUpdateTask,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Task Description\",\n          value: newTask.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"age\",\n          placeholder: \"Task Status\",\n          value: newTask.age,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          placeholder: \"Date\",\n          value: newTask.city,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: task ? 'Update Task' : 'Add New'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(AddTaskModal, \"MbpMSEHXLYIAdEIVXjSBo7vpqkw=\");\n_c = AddTaskModal;\nexport default AddTaskModal;\nvar _c;\n$RefreshReg$(_c, \"AddTaskModal\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AddTaskModal","isVisible","onClose","onAdd","task","_s","newTask","setNewTask","name","age","city","country","handleChange","e","value","target","prev","Description","Status","Date","handleAddOrUpdateTask","preventDefault","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","onClick","_c","$RefreshReg$"],"sources":["/Users/JM/Desktop/Task_Fullstack_Developer_dotNET/frontend/src/Components/AddTaskModal.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../Style/AddTaskModal.css'; // Import the CSS for styling the modal\n\ninterface Task {\n    Description?: string;\n    Status?: string;\n    Date?: string;\n}\n\ninterface AddTaskModalProps {\n    isVisible: boolean;\n    onClose: () => void;\n    onAdd: (task: Task) => void;\n    task?: Task;\n}\n\nconst AddTaskModal: React.FC<AddTaskModalProps> = ({ isVisible, onClose, onAdd, task }) => {\n    const [newTask, setNewTask] = useState<Task>({\n        name: '',\n        age: '',\n        city: '',\n        country: '',\n    });\n\n    // Function to handle input changes\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;\n        setNewTask((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    };\n\n    // Use effect to pre-populate fields when editing\n    useEffect(() => {\n        if (task) {\n            setNewTask({\n                name: task.Description || '',\n                age: task.Status || '',\n                city: task.Date || '',\n                country: '', // You can add more fields if necessary\n            });\n        } else {\n            setNewTask({ name: '', age: '', city: '', country: '' }); // Reset when adding a new task\n        }\n    }, [task]);\n\n    // Function to handle adding a new task\n    const handleAddOrUpdateTask = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (newTask.name && newTask.age && newTask.city) {\n            onAdd({\n                Description: newTask.name,\n                Status: newTask.age,\n                Date: newTask.city,\n            });\n            setNewTask({ name: '', age: '', city: '', country: '' }); // Reset form\n        } else {\n            alert(\"Please fill out all fields.\"); // Simple validation\n        }\n    };\n\n    if (!isVisible) return null; // If not visible, don't render anything\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h3>{task ? 'Update Task' : 'Add New Task'}</h3>\n                <form onSubmit={handleAddOrUpdateTask}>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Task Description\"\n                        value={newTask.name}\n                        onChange={handleChange}\n                        required\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"age\"\n                        placeholder=\"Task Status\"\n                        value={newTask.age}\n                        onChange={handleChange}\n                        required\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"city\"\n                        placeholder=\"Date\"\n                        value={newTask.city}\n                        onChange={handleChange}\n                        required\n                    />\n                    \n                    <button type=\"submit\">{task ? 'Update Task' : 'Add New'}</button>\n                    <button type=\"button\" onClick={onClose}>Cancel</button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default AddTaskModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}